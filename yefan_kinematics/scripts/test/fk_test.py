import unittest
import numpy.testing
from yefan_kinematics.scripts.fk import calculate

IFK_CASES = [
    [[0, 0, 0, 0, 0, 0], [[1, 0, 0, 1807],
                          [0, 1, 0, 0],
                          [0, 0, 1, 1970],
                          [0, 0, 0, 1]]
     ],
    [[0.5, 0.5, 0.5, 0.5, 0.5, 0.5], [[6.5995575e-01, -7.0813223e-02, -7.4795983e-01, 1.9912926e+03],
                                      [6.2244683e-01, 6.0904827e-01, 4.9154872e-01, 1.1441590e+03],
                                      [4.2073549e-01, -7.8996562e-01, 4.4602237e-01, 1.9288594e+03],
                                      [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, 1.0000000e+00]]
     ],
    [[0.5, 0.5, 0.5, 0.5, 0.5, -0.5], [[6.5995575e-01, -6.6764704e-01, -3.4453715e-01, 1.9912926e+03],
                                       [6.2244683e-01, 7.4269417e-01, -2.4691155e-01, 1.1441590e+03],
                                       [4.2073549e-01, -5.1505361e-02, 9.0572007e-01, 1.9288594e+03],
                                       [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, 1.0000000e+00]]
     ],
    [[0.5, 0.5, 0.5, 0.5, -0.5, 0.5], [[8.8034656e-01, -4.7423590e-01, -9.4995633e-03, 2.0386766e+03],
                                       [2.1902415e-01, 3.8865746e-01, 8.9497140e-01, 1.0574232e+03],
                                       [-4.2073549e-01, -7.8996562e-01, 4.4602237e-01, 1.7479431e+03],
                                       [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, 1.0000000e+00]]
     ],
    [[0.5, 0.5, 0.5, 0.5, -0.5, -0.5], [[8.8034656e-01, -2.6422436e-01, 3.9392312e-01, 2.0386766e+03],
                                        [2.1902415e-01, 9.6308498e-01, 1.5651113e-01, 1.0574232e+03],
                                        [-4.2073549e-01, -5.1505361e-02, 9.0572007e-01, 1.7479431e+03],
                                        [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, 1.0000000e+00]]
     ],
    [[0.5, 0.5, 0.5, -0.5, 0.5, 0.5], [[8.8034656e-01, -2.6422436e-01, -3.9392312e-01, 2.0386766e+03],
                                       [2.1902415e-01, 9.6308498e-01, -1.5651113e-01, 1.0574232e+03],
                                       [4.2073549e-01, 5.1505361e-02, 9.0572007e-01, 1.9288594e+03],
                                       [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, 1.0000000e+00]]
     ],
    [[0.5, 0.5, 0.5, -0.5, 0.5, -0.5], [[8.8034656e-01, -4.7423590e-01, 9.4995633e-03, 2.0386766e+03],
                                        [2.1902415e-01, 3.8865746e-01, -8.9497140e-01, 1.0574232e+03],
                                        [4.2073549e-01, 7.8996562e-01, 4.4602237e-01, 1.9288594e+03],
                                        [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, 1.0000000e+00]]
     ],
    [[0.5, 0.5, 0.5, -0.5, -0.5, 0.5], [[6.5995575e-01, -6.6764704e-01, 3.4453715e-01, 1.9912926e+03],
                                        [6.2244683e-01, 7.4269417e-01, 2.4691155e-01, 1.1441590e+03],
                                        [-4.2073549e-01, 5.1505361e-02, 9.0572007e-01, 1.7479431e+03],
                                        [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, 1.0000000e+00]]
     ],
    [[0.5, 0.5, 0.5, -0.5, -0.5, -0.5], [[6.5995575e-01, -7.0813223e-02, 7.4795983e-01, 1.9912926e+03],
                                         [6.2244683e-01, 6.0904827e-01, -4.9154872e-01, 1.1441590e+03],
                                         [-4.2073549e-01, 7.8996562e-01, 4.4602237e-01, 1.7479431e+03],
                                         [0.0000000e+00, 0.0000000e+00, 0.0000000e+00, 1.0000000e+00]]

     ], [[0.5, 0.5, -0.5, 0.5, 0.5, 0.5], [[6.16615479e-01, -7.46897683e-01, -2.48855786e-01, 1.63174695e+03],
                                           [5.98769937e-01, 2.39701651e-01, 7.64210496e-01, 9.47738365e+02],
                                           [-5.11135906e-01, -6.20231384e-01, 5.95023627e-01, 5.47992193e+02],
                                           [0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]
         ],
    [[0.5, 0.5, -0.5, 0.5, 0.5, -0.5], [[0.616615478703, -0.612955463787, 0.494035374075, 1631.74694933],
                                        [0.598769936726, 0.772572312926, 0.211202708728, 947.738364781],
                                        [-0.511135905898, 0.16558267033, 0.843399350835, 547.99219253],
                                        [0.0, 0.0, 0.0, 1.0]]
     ],
    [[0.5, 0.5, -0.5, 0.5, -0.5, 0.5], [[0.215613408892, -0.964867887535, 0.150135996714, 1545.53150432],
                                        [-0.144121223313, 0.120623985494, 0.982180699828, 788.016765373],
                                        [-0.965784619311, -0.233409112347, -0.11304979158, 450.242719147],
                                        [0.0, 0.0, 0.0, 1.0]]
     ],
    [[0.5, 0.5, -0.5, 0.5, -0.5, -0.5], [[0.215613408892, -0.394985259484, 0.893027156752, 1545.53150432],
                                         [-0.144121223313, 0.891649978249, 0.429172913031, 788.016765373],
                                         [-0.965784619311, -0.221239601065, 0.135325932561, 450.242719147],
                                         [0.0, 0.0, 0.0, 1.0]]
     ],
    [[0.5, 0.5, -0.5, -0.5, 0.5, 0.5], [[0.837006293307, -0.318915934514, 0.4446494031, 1679.13097447],
                                        [0.195347256614, 0.93320683988, 0.301603122222, 861.002488557],
                                        [-0.511135905898, -0.16558267033, 0.843399350835, 547.99219253],
                                        [0.0, 0.0, 0.0, 1.0]]
     ],
    [[0.5, 0.5, -0.5, -0.5, 0.5, -0.5], [[0.837006293307, 0.201848556325, 0.508603603285, 1679.13097447],
                                         [0.195347256614, 0.758004083716, -0.62230961619, 861.002488557],
                                         [-0.511135905898, 0.620231383742, 0.595023626693, 547.99219253],
                                         [0.0, 0.0, 0.0, 1.0]]
     ],
    [[0.5, 0.5, -0.5, -0.5, -0.5, 0.5], [[-0.00477740571235, -0.536886138818, 0.843641185777, 1498.14747918],
                                         [0.259301456799, 0.814129174557, 0.519573326525, 874.752641597],
                                         [-0.965784619311, 0.221239601065, 0.135325932561, 450.242719147],
                                         [0.0, 0.0, 0.0, 1.0]]
     ],
    [[0.5, 0.5, -0.5, -0.5, -0.5, -0.5], [[-0.00477740571235, 0.419818760629, 0.907595385962, 1498.14747918],
                                          [0.259301456799, 0.877081749039, -0.404339411887, 874.752641597],
                                          [-0.965784619311, 0.233409112347, -0.11304979158, 450.242719147],
                                          [0.0, 0.0, 0.0, 1.0]]
     ]

]


def ppp(t):
    s = ""
    for line in t:
        s += '[' + ', '.join(map(str, line)) + "],"
    return "[" + s + "]"


class TestFK(unittest.TestCase):
    def test_fk(self):
        for i in range(len(IFK_CASES)):
            c = IFK_CASES[i]
            numpy.testing.assert_almost_equal(c[1], calculate(c[0]), decimal=4,
                                              err_msg="case failed: " + str(i) + ppp(calculate(c[0])))
            #
            # def test_positions_failed(self):
            #     with self.assertRaises(KeyError) as ctx:
            #         init_js_wrapper().position('joint3')
            #     self.assertIn("not found in names", str(ctx.exception))


if __name__ == '__main__':
    unittest.main()
